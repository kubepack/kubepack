/*
Copyright The Kubepack Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package kubepack.dev.kubepack.apis.kubepack.v1alpha1;

import "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

message ApplicationPackage {
  optional ChartRepoRef bundle = 1;

  optional ChartRepoRef chart = 2;

  optional string channel = 3;
}

message Badge {
  optional string url = 1;

  optional string alt = 2;

  optional string logo = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=bundles,singular=bundle,scope=Cluster,categories={kubepack,appscode}
// +kubebuilder:subresource:status
message Bundle {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional BundleSpec spec = 2;

  optional BundleStatus status = 3;
}

message BundleList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Bundle items = 2;
}

message BundleOption {
  optional BundleRef bundleRef = 1;

  optional string version = 2;
}

message BundleOptionView {
  optional PackageMeta packageMeta = 1;

  optional string displayName = 2;

  repeated Feature features = 3;

  repeated PackageCard packages = 4;
}

message BundleRef {
  optional string url = 1;

  optional string name = 2;
}

message BundleSpec {
  optional PackageDescriptor packageDescriptor = 3;

  optional string displayName = 4;

  repeated Feature features = 5;

  optional string namespace = 6;

  repeated PackageRef packages = 7;
}

message BundleStatus {
  // ObservedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 1;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message BundleView {
  optional BundleOptionView bundleOptionView = 1;

  optional string licenseKey = 2;
}

message ChartCard {
  optional ChartRef chartRef = 1;

  optional PackageDescriptor packageDescriptor = 2;

  repeated string features = 3;

  optional string namespace = 4;

  repeated VersionOption versions = 5;

  optional bool multiSelect = 6;

  optional bool required = 7;

  optional bool selected = 8;
}

message ChartOption {
  optional ChartRef chartRef = 1;

  repeated string features = 2;

  optional string namespace = 3;

  repeated VersionDetail versions = 4;

  optional bool multiSelect = 5;

  optional bool required = 6;
}

message ChartRef {
  optional string url = 1;

  optional string name = 2;
}

// ChartRepoRef references to a single version of a Chart
message ChartRepoRef {
  optional string name = 1;

  optional string url = 2;

  optional string version = 3;
}

message ChartSelection {
  optional ChartRef chartRef = 1;

  optional string version = 2;

  optional string releaseName = 3;

  optional string namespace = 4;

  // Bundle points to the parent bundle which was used to install this, if any.
  // If the chart was installed directly it will be unset.
  optional ChartRepoRef bundle = 5;

  optional string valuesFile = 6;

  // RFC 6902 compatible json patch. ref: http://jsonpatch.com
  // +optional
  // +kubebuilder:pruning:PreserveUnknownFields
  optional k8s.io.apimachinery.pkg.runtime.RawExtension valuesPatch = 7;

  optional ResourceDefinitions resources = 8;

  repeated WaitFlags waitFors = 9;
}

// ContactData contains information about an individual or organization.
message ContactData {
  // Name is the descriptive name.
  optional string name = 1;

  // Url could typically be a website address.
  optional string url = 2;

  // Email is the email address.
  optional string email = 3;
}

message Feature {
  optional string trait = 1;

  optional string value = 2;
}

message FeatureTable {
  repeated Plan plans = 1;

  repeated Row rows = 2;
}

message GroupResource {
  optional string group = 1;

  optional string name = 2;
}

message GroupVersionResource {
  optional string group = 1;

  optional string version = 2;

  optional string resource = 3;
}

message Hub {
  repeated Repository repositories = 1;
}

// ImageSpec contains information about an image used as an icon.
message ImageSpec {
  // The source for image represented as either an absolute URL to the image or a Data URL containing
  // the image. Data URLs are defined in RFC 2397.
  optional string src = 1;

  // (optional) The size of the image in pixels (e.g., 25x25).
  optional string size = 2;

  // (optional) The mine type of the image (e.g., "image/png").
  optional string type = 3;
}

// Link contains information about an URL to surface documentation, dashboards, etc.
message Link {
  // Description is human readable content explaining the purpose of the link.
  optional string description = 1;

  // Url typically points at a website address.
  optional string url = 2;
}

// MediaSpec contains information about an image/video.
message MediaSpec {
  // Description is human readable content explaining the purpose of the link.
  optional string description = 1;

  optional ImageSpec imageSpec = 2;
}

message OneOfBundleOption {
  optional string description = 1;

  repeated BundleOption bundles = 2;
}

message OneOfBundleOptionView {
  optional string description = 1;

  repeated BundleOptionView bundles = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=orders,singular=order,scope=Cluster,categories={kubepack,appscode}
// +kubebuilder:subresource:status
message Order {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional OrderSpec spec = 2;

  optional OrderStatus status = 3;
}

message OrderList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Order items = 2;
}

message OrderSpec {
  repeated PackageSelection items = 1;

  // KubeVersion is a SemVer constraint specifying the version of Kubernetes required.
  optional string kubeVersion = 2;
}

message OrderStatus {
  // ObservedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 1;
}

message PackageCard {
  optional ChartCard chart = 1;

  optional BundleOptionView bundle = 2;

  optional OneOfBundleOptionView oneOf = 3;
}

message PackageDescriptor {
  // Type is the type of the application (e.g. WordPress, MySQL, Cassandra).
  optional string type = 1;

  // Description is a brief string description of the Application.
  optional string description = 2;

  // Icons is an optional list of icons for an application. Icon information includes the source, size,
  // and mime type.
  repeated ImageSpec icons = 3;

  // Maintainers is an optional list of maintainers of the application. The maintainers in this list maintain the
  // the source code, images, and package for the application.
  repeated ContactData maintainers = 4;

  // Keywords is an optional list of key words associated with the application (e.g. MySQL, RDBMS, database).
  repeated string keywords = 5;

  // Links are a list of descriptive URLs intended to be used to surface additional documentation, dashboards, etc.
  repeated Link links = 6;

  // Notes contain a human readable snippets intended as a quick start for the users of the Application.
  // CommonMark markdown syntax may be used for rich text representation.
  optional string notes = 7;
}

message PackageMeta {
  optional PackageDescriptor packageDescriptor = 1;

  optional string name = 2;

  optional string url = 3;

  // Version is an optional version indicator for the Application.
  optional string version = 4;
}

message PackageRef {
  optional ChartOption chart = 1;

  optional BundleOption bundle = 2;

  optional OneOfBundleOption oneOf = 3;
}

message PackageSelection {
  optional ChartSelection chart = 1;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message PackageView {
  optional PackageMeta packageMeta = 1;

  // Chart value files
  repeated ValuesFile valuesFiles = 2;

  // openAPIV3Schema describes the schema used for validation and pruning of the Values file.
  // +optional
  optional k8s.io.apiextensions_apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps openAPIV3Schema = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=plans,singular=plan,scope=Cluster,categories={kubepack,appscode}
// +kubebuilder:subresource:status
message Plan {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PlanSpec spec = 2;

  optional PlanStatus status = 3;
}

message PlanList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Plan items = 2;
}

message PlanSpec {
  optional string id = 1;

  optional string name = 2;

  optional string displayName = 3;

  optional string description = 4;

  optional string productID = 5;

  optional string phase = 6;

  // Plans for sorted by weight before displaying to users
  optional int32 weight = 7;

  optional ChartRef bundle = 8;

  // +optional
  repeated string includedPlans = 9;

  optional string aggregateUsage = 10;

  optional int64 amount = 11;

  optional double amountDecimal = 12;

  optional string billingScheme = 13;

  optional string currency = 14;

  optional string interval = 15;

  optional int64 intervalCount = 16;

  repeated PlanTier tiers = 17;

  optional string tiersMode = 18;

  optional PlanTransformUsage transformUsage = 19;

  optional int64 trialPeriodDays = 20;

  optional string usageType = 21;
}

message PlanStatus {
  // ObservedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 1;
}

// PlanTier configures tiered pricing
message PlanTier {
  optional int64 flatAmount = 1;

  optional double flatAmountDecimal = 2;

  optional int64 unitAmount = 3;

  optional double unitAmountDecimal = 4;

  optional int64 upTo = 5;
}

// PlanTransformUsage represents the bucket billing configuration.
message PlanTransformUsage {
  optional int64 divideBy = 1;

  optional string round = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=products,singular=product,scope=Cluster,categories={kubepack,appscode}
// +kubebuilder:subresource:status
message Product {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ProductSpec spec = 2;

  optional ProductStatus status = 3;
}

message ProductList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Product items = 2;
}

message ProductSpec {
  optional string id = 1;

  optional string key = 2;

  optional string name = 3;

  optional string shortName = 4;

  optional string tagline = 5;

  // +optional
  optional string summary = 6;

  optional int64 owner = 7;

  // +optional
  optional string ownerName = 8;

  // +optional
  optional string description = 9;

  // +optional
  optional string unitLabel = 10;

  optional string phase = 11;

  // +optional
  repeated MediaSpec icons = 12;

  // +optional
  repeated ContactData maintainers = 13;

  // +optional
  repeated string keywords = 14;

  // +optional
  repeated Link links = 15;

  // +optional
  repeated Badge badges = 16;

  // +optional
  repeated ProductVersion versions = 17;

  // +optional
  optional string latestVersion = 18;
}

message ProductStatus {
  // ObservedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 1;
}

message ProductVersion {
  optional string version = 1;

  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time releaseDate = 2;
}

message Repository {
  optional string name = 1;

  optional string url = 2;

  repeated ContactData maintainers = 3;
}

message ResourceDefinitions {
  repeated ResourceID owned = 1;

  repeated ResourceID required = 2;
}

// ResourceID identifies a resource
message ResourceID {
  optional string group = 1;

  optional string version = 2;

  // Name is the plural name of the resource to serve.  It must match the name of the CustomResourceDefinition-registration
  // too: plural.group and it must be all lowercase.
  optional string name = 3;

  // Kind is the serialized kind of the resource.  It is normally CamelCase and singular.
  optional string kind = 4;

  optional string scope = 5;
}

message Row {
  optional string trait = 1;

  repeated string values = 2;
}

message ValuesFile {
  optional string filename = 1;

  optional k8s.io.apimachinery.pkg.runtime.RawExtension values = 2;
}

message VersionDetail {
  optional VersionOption versionOption = 1;

  optional ResourceDefinitions resources = 3;

  repeated WaitFlags waitFors = 4;

  // jsonpatch path in Values where the license key will be set using replace operation, if defined.
  // See: http://jsonpatch.com
  optional string licenseKeyPath = 5;
}

message VersionOption {
  optional string version = 1;

  optional bool selected = 2;

  optional string valuesFile = 3;

  // RFC 6902 compatible json patch. ref: http://jsonpatch.com
  // +optional
  // +kubebuilder:pruning:PreserveUnknownFields
  optional k8s.io.apimachinery.pkg.runtime.RawExtension valuesPatch = 4;
}

message WaitFlags {
  optional GroupResource resource = 1;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector labels = 2;

  optional bool all = 3;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration timeout = 4;

  optional string for = 5;
}

