// Package resourceclasses Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// admin.yaml
// config.yaml
// datastore.yaml
// helm2.yaml
// helm3.yaml
// kubernetes.yaml
// monitoring.yaml
// networking.yaml
// security.yaml
// storage.yaml
// workloads.yaml
package resourceclasses

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _adminYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x91\x4f\x8b\xdb\x40\x0c\xc5\xef\xf3\x29\x44\xae\xa5\x76\x7d\x0b\x73\x2b\xe9\xa5\x50\x0a\x4d\x61\xef\xca\x58\xd8\x22\x9e\x3f\x91\xc6\xde\x3f\x9f\x7e\xb1\x63\x6f\x12\x16\xb3\x9b\xc3\xde\x64\x59\xef\xfd\x9e\x34\x98\xf8\x81\x44\x39\x06\x0b\x9e\x32\x16\x98\x92\xba\x58\x53\xe1\xa2\x2f\x87\x0a\xbb\xd4\x62\x65\x8e\x1c\x6a\x0b\x7b\xd2\xd8\x8b\xa3\x5d\x87\xaa\x66\x1c\xaf\x31\xa3\x35\x00\x01\x3d\x59\xf8\x59\x7b\x0e\x46\x13\xb9\xb1\xf7\x48\xdc\xb4\xd9\x42\xf5\xc3\x00\xb0\x8b\x41\xc7\xee\x77\x50\x71\x16\xda\x9c\x93\xda\xb2\x74\x75\xb8\x45\x1e\xb7\x5a\x4e\xc3\xa5\xcc\x34\x37\xd2\x48\x4b\x1c\xdd\x0b\x1d\x1a\x03\x00\x90\x9f\x13\x59\x60\x8f\x0d\x95\x3a\x34\xdf\x9e\x7c\x67\x00\x28\x64\x61\x9a\x41\xe7\x50\x7f\xd1\x93\x26\x74\xa4\x93\x4e\xe8\xd4\xb3\x50\x6d\x21\x4b\x4f\x17\xab\xa9\x02\x68\x24\xf6\xc9\xc2\x66\x33\x7f\x2f\x21\xec\xe4\x76\xe5\x03\x30\x2c\x77\x1b\xaa\x2b\xdc\x1f\xf6\x9c\x61\x8f\xa1\x99\x07\x3f\xe7\xde\x8d\x32\xb9\xa8\xd6\xec\x97\x27\x80\x7f\x7d\xcc\x78\x0f\x61\xa9\x4e\x17\xe1\x1a\x64\xd7\xf5\x9a\x49\x60\x1f\xbb\xbb\xae\x26\x07\x74\x05\xf6\xb9\x8d\xc2\x2f\x98\x39\x86\xe2\xb8\xd5\x82\xe3\xbb\x30\xee\x4c\x90\x37\xc0\xea\xbe\x5f\x16\xe1\x63\xf6\xee\xff\x6f\xf8\x25\x3c\xfe\x5c\xc3\x69\x8e\x82\x0d\xad\xae\xa9\x5c\x5f\x19\xdc\x80\x0e\x94\xb1\x32\xaf\x01\x00\x00\xff\xff\x43\xce\x19\x74\x80\x03\x00\x00")

func adminYamlBytes() ([]byte, error) {
	return bindataRead(
		_adminYaml,
		"admin.yaml",
	)
}

func adminYaml() (*asset, error) {
	bytes, err := adminYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "admin.yaml", size: 896, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xbd\x4e\xec\x30\x10\x85\x7b\x3f\xc5\xd1\xb6\x57\x37\x56\x1a\x84\xa6\xdd\x82\x8a\x06\x24\xfa\x91\x33\x38\xd6\xc6\x3f\x78\x9c\x00\x6f\x8f\x92\xec\x8a\x6c\x4d\x67\x59\x67\xce\xf7\xcd\x70\x09\x6f\x52\x35\xe4\x44\x88\xd2\xb8\xe3\x52\xd4\xe5\x41\x3a\x97\xa3\x5d\x7a\x9e\xca\xc8\xbd\xb9\x84\x34\x10\x5e\x44\xf3\x5c\x9d\x9c\x27\x56\x35\x6b\x7c\xe0\xc6\x64\x80\xc4\x51\x08\xe7\x9c\xde\x83\x37\x5a\xc4\xad\x9f\x5c\xc2\x53\xcd\x73\x21\x9c\x4e\x06\xf8\x94\xe0\xc7\x46\x78\x30\x40\x70\x39\xe9\x9a\xf9\x0f\xad\x8e\x30\xb6\x56\x94\xac\x75\x43\xba\x37\xb8\x3c\xaa\xdd\xc2\xb6\x5e\xe1\x6e\x85\x8b\x5a\xb7\xc1\x3a\x5d\xbc\x01\x80\xf6\x5d\x84\x10\x22\x7b\xb1\xba\xf8\x7f\x5f\x71\x32\x80\xa4\x56\x83\x5c\x49\x47\x49\x3c\x73\xd1\x6d\xb0\xca\xc7\x1c\xaa\x0c\x84\x56\x67\xf9\xed\xda\x5e\x80\x3f\x6c\xb0\xc7\x77\x0d\xc2\x2e\x10\x6f\x3d\xc0\x72\x3b\xe4\xd2\x1f\x78\xaf\xe2\xaa\xb4\x3f\xb2\xf4\x50\x72\x0f\xfa\x09\x00\x00\xff\xff\x18\xdd\x0b\xe6\xc1\x01\x00\x00")

func configYamlBytes() ([]byte, error) {
	return bindataRead(
		_configYaml,
		"config.yaml",
	)
}

func configYaml() (*asset, error) {
	bytes, err := configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yaml", size: 449, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _datastoreYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x39\x4f\xc4\x30\x10\x85\x7b\xff\x8a\xd7\x23\xd6\x5a\x89\x02\xb9\x05\x44\x4f\x41\x3f\x6b\x8f\x12\x2b\x89\x6d\x66\x26\x01\xfe\x3d\xca\xb1\x1c\x12\x9d\x65\xbf\xe3\xf3\xa3\x96\x5f\x59\x34\xd7\x12\x30\xb1\xd1\x89\x5a\xd3\x58\x13\x9f\x62\x9d\xfc\x72\xa6\xb1\xf5\x74\x76\x43\x2e\x29\xe0\x85\xb5\xce\x12\xf9\x61\x24\x55\xb7\xca\x13\x19\x05\x07\x14\x9a\x38\xe0\x91\x8c\xd4\xaa\xb0\xd3\xc6\x71\xbd\xa7\x96\x9f\xa5\xce\x2d\x60\x98\x2f\x9c\x2e\x6b\xaa\x03\xde\x39\x77\xbd\x05\xdc\x39\x20\xc7\x5a\x74\xd5\xde\x42\x25\x06\xf4\x66\x4d\x83\xf7\x31\x95\xbf\x30\xc3\xbd\xfa\x4d\xec\xe5\xe0\x88\x2b\x07\xab\x4f\xd7\xde\x93\x2e\x9d\x03\x00\xfb\x6c\x1c\x90\x27\xea\xd8\xeb\xd2\xdd\x7c\x4c\xa3\x03\xb8\x98\x64\x3e\xca\x76\xe4\xa7\x91\xd4\x72\x54\x26\x89\xfd\x66\x15\x7e\x9b\xb3\x70\x0a\x30\x99\xf9\x27\x6d\x3b\x01\xdd\x3f\xdf\xd9\x6d\x3b\x53\x00\xff\x8e\x64\x3d\xde\x97\xeb\xca\xdf\x9b\x7e\x05\x00\x00\xff\xff\xab\x14\x0c\x8d\x7b\x01\x00\x00")

func datastoreYamlBytes() ([]byte, error) {
	return bindataRead(
		_datastoreYaml,
		"datastore.yaml",
	)
}

func datastoreYaml() (*asset, error) {
	bytes, err := datastoreYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datastore.yaml", size: 379, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _helm2Yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xb1\x4e\xc4\x30\x10\x44\x7b\x7f\xc5\xf4\x88\xb3\xee\x68\xd0\xb6\x34\xd4\x57\xd0\xaf\x9c\x21\xb1\xce\x76\x8c\xd7\x17\xe0\xef\x51\x42\x74\x02\x89\x8e\x76\xf4\x76\xdf\xd3\x1a\x5f\xd8\x2c\xce\x45\x90\xd9\xf5\xa0\xb5\x5a\x98\x07\x1e\xc2\x9c\xfd\x72\xd4\x54\x27\x3d\xba\x4b\x2c\x83\xe0\x4c\x9b\xaf\x2d\xf0\x29\xa9\x99\x5b\xf1\x41\xbb\x8a\x03\x8a\x66\x0a\x9e\x99\x32\x4e\xce\x2a\xc3\x3a\xbe\x33\x8e\x53\x17\x3c\x38\x20\x86\xb9\xd8\x3a\xde\xc3\x5a\x10\x4c\xbd\x57\x13\xef\xc3\x50\x7e\x2b\x2f\x8f\xe6\x37\xd8\xb7\xdd\x16\x56\x1b\xcd\x4f\x4c\xf9\x60\xcb\xe8\x00\xa0\x7f\x56\x0a\x62\xd6\x91\xde\x96\xf1\xee\x23\x27\x07\xb0\xf4\x16\xb9\x7b\xbe\x9b\xce\x4c\x54\xa3\x6d\x57\x8d\x6f\xd7\xd8\x38\x08\x5e\x35\x19\xb7\xad\x6a\x9f\x04\xdb\x77\xbf\x9c\x7c\xfb\xc9\xdf\xaa\xff\xd3\xbd\x7f\xbc\xa5\xff\x1d\xff\x15\x00\x00\xff\xff\x89\x40\x4e\x66\x89\x01\x00\x00")

func helm2YamlBytes() ([]byte, error) {
	return bindataRead(
		_helm2Yaml,
		"helm2.yaml",
	)
}

func helm2Yaml() (*asset, error) {
	bytes, err := helm2YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "helm2.yaml", size: 393, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _helm3Yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\x3d\x4f\xc4\x30\x10\x44\x7b\xff\x8a\xe9\x11\xb1\x4e\x69\x90\x5b\x1a\xea\x2b\xe8\x57\xce\x90\x58\xe7\x2f\xbc\xbe\x00\xff\x1e\x25\x44\x27\x90\xe8\xae\x1d\xbd\xdd\xf7\xa4\x86\x57\x36\x0d\x25\x3b\x24\x76\x19\xa4\x56\xf5\x65\xe2\xe0\x4b\xb2\xeb\x49\x62\x5d\xe4\x64\x2e\x21\x4f\x0e\x67\x6a\xb9\x36\xcf\xe7\x28\xaa\x66\xc3\x27\xe9\xe2\x0c\x90\x25\xd1\xe1\x85\x31\x61\x34\x5a\xe9\xb7\xf1\x83\x61\x5e\xba\xc3\x68\x80\xe0\x4b\xd6\x6d\x7c\x84\x36\xef\xb0\xf4\x5e\xd5\x59\xeb\xa7\xfc\x57\x79\x79\x52\xbb\xc3\xb6\x1d\x36\xbf\xd9\xa8\x76\x61\x4c\x83\xae\xb3\x01\x80\xfe\x55\xe9\x10\x92\xcc\xb4\xba\xce\x0f\x9f\x29\x1a\x80\xb9\xb7\xc0\xc3\xf3\xd3\x74\x66\xa4\x28\x75\xbf\x6a\x7c\xbf\x86\xc6\xc9\xe1\x4d\xa2\x72\xdf\xaa\xf4\xc5\x61\xff\x6e\xd7\xd1\xb6\xdf\xfc\xad\xfa\x9e\xee\xe3\xe3\x2d\xfd\xff\xf8\xef\x00\x00\x00\xff\xff\x80\x70\x8d\x5b\x89\x01\x00\x00")

func helm3YamlBytes() ([]byte, error) {
	return bindataRead(
		_helm3Yaml,
		"helm3.yaml",
	)
}

func helm3Yaml() (*asset, error) {
	bytes, err := helm3YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "helm3.yaml", size: 393, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x91\xbd\x4e\xec\x30\x10\x85\x7b\x3f\xc5\xe9\xaf\x6e\xac\xed\x56\x2e\xa1\x44\x34\x20\xd1\xcf\x3a\xa3\xc4\x4a\x62\x1b\xcf\x38\xc0\xdb\xa3\x84\x24\x02\xc1\x56\x88\x6e\x34\x3f\xe7\xfb\xa4\xa1\x1c\x9e\xb8\x48\x48\xd1\x61\x62\xa5\x86\x72\x16\x9f\x5a\x6e\x7c\x9a\xec\x7c\xa2\x31\xf7\x74\x32\x43\x88\xad\xc3\x03\x4b\xaa\xc5\xf3\xed\x48\x22\x66\x59\x6f\x49\xc9\x19\x20\xd2\xc4\x0e\x77\xf5\xc2\x25\xb2\xb2\x18\xc9\xec\x97\xc1\x0b\x87\xae\x57\x87\x93\x01\x82\x4f\x51\x96\xe6\x7f\x48\xf1\x0e\xbd\x6a\x16\x67\xad\x6f\xe3\x57\xec\x70\x16\xbb\x2e\xdb\xb2\x11\xfd\x42\x64\xb1\xc3\x41\x68\x64\xee\x0c\x00\xe8\x5b\x66\x87\x30\x51\xc7\x56\xe6\xee\xdf\xeb\x34\x1a\x80\xa3\x96\xc0\x1b\xed\xc3\xee\x86\x24\xf8\xf5\xa4\xf0\x73\x0d\x85\x5b\x07\x2d\x95\xd7\x56\x26\xed\x1d\xec\x5a\x1f\x9e\xbf\x31\xbd\x2c\xb4\x43\xf2\x9a\xe6\xee\x76\x4f\xbe\x0f\x91\xe5\x9a\xde\x7a\xbd\x25\x75\x25\xd5\xec\xe0\xc7\x2a\xca\xa5\x19\xce\xd2\x84\xb4\xcd\x76\x0b\x87\xe9\x73\x22\x30\xef\x4f\x3e\x5e\xfa\x0d\x8e\x47\xd6\x3f\x10\xd8\x43\x7f\x72\x78\x0f\x00\x00\xff\xff\xed\x74\x15\x74\x7e\x02\x00\x00")

func kubernetesYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesYaml,
		"kubernetes.yaml",
	)
}

func kubernetesYaml() (*asset, error) {
	bytes, err := kubernetesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes.yaml", size: 638, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _monitoringYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xbb\x4e\xc4\x30\x10\x45\x7b\x7f\xc5\xed\x11\x6b\x6d\xb7\x72\x4b\x41\x85\x84\x28\xe8\x2d\x67\xe4\x8c\x36\xf6\x98\x19\x27\xc0\xdf\xa3\x3c\x58\xa0\xa1\xb3\x74\x5f\xc7\x13\x1b\xbf\x92\x1a\x4b\x0d\x28\xd4\xe3\x29\xb6\x66\x49\x06\x3a\x25\x29\x7e\x39\xc7\xa9\x8d\xf1\xec\xae\x5c\x87\x80\x17\x32\x99\x35\xd1\xc3\x14\xcd\xdc\x6a\x1f\x62\x8f\xc1\x01\x35\x16\x0a\x78\x92\xca\x5d\x94\x6b\x76\xd6\x28\xad\x42\x6c\xfc\xa8\x32\xb7\x80\x72\x13\x4f\x49\x94\xc4\xd6\x05\x07\xbc\x13\xe7\xb1\x07\x5c\x1c\xc0\x49\xaa\xad\xb1\x7b\x98\xa6\x80\xb1\xf7\x66\xc1\xfb\x34\xd4\xbf\x60\xd7\x8b\xf9\xcd\xec\xf5\x60\x4a\x2b\x13\x99\xff\x35\x63\x4b\x76\x00\xd0\x3f\x1b\x05\x70\x89\x99\xbc\x2d\xf9\xee\xa3\x4c\x0e\xa0\xda\x95\xe9\x58\xdb\xf9\x9f\x55\x0a\xf5\x91\x66\xdb\x72\x4a\x6f\x33\x2b\x0d\x01\x5d\x67\xfa\xa9\xda\x5e\x40\xfe\xff\x5f\x7b\xc3\x0e\x17\xd0\x6e\xd5\x64\x87\xb8\x7c\xdf\x7d\x39\xbb\xaf\x00\x00\x00\xff\xff\x3b\x88\x41\x24\x87\x01\x00\x00")

func monitoringYamlBytes() ([]byte, error) {
	return bindataRead(
		_monitoringYaml,
		"monitoring.yaml",
	)
}

func monitoringYaml() (*asset, error) {
	bytes, err := monitoringYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "monitoring.yaml", size: 391, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _networkingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\xbd\x6e\xe3\x30\x10\x84\x7b\x3d\xc5\x40\xc5\x35\x87\x93\xe0\xe2\x00\x83\xed\x5d\x93\x26\x08\x12\xc0\x3d\x43\x2d\xe8\x85\x24\x92\xd9\xa5\xe8\xf8\xed\x03\xd9\x32\x22\x21\x55\x7e\x3a\x89\x18\xce\xf7\x71\xd7\x26\x3e\x90\x28\xc7\x60\x30\x52\xb6\x8d\x4d\x49\x5d\xec\xa8\x71\x71\x6c\xcb\xce\x0e\xe9\x68\x77\x55\xcf\xa1\x33\x78\x24\x8d\x93\x38\xfa\x37\x58\xd5\x6a\x8e\x77\x36\x5b\x53\x01\xc1\x8e\x64\x50\x3f\x91\x14\x76\x84\x5f\xf8\xcf\xea\x62\x21\x39\xd7\x95\x26\x72\x73\xe6\x44\xec\x8f\xd9\xe0\x6f\x05\xb0\x8b\x41\xe7\xc3\x3f\x50\x71\x06\xc7\x9c\x93\x9a\xb6\x75\x5d\xd8\x1a\xf4\x7b\x6d\x2f\xe1\x56\x16\xb8\x9b\xe1\xa4\x6d\xa0\x7c\x8a\xd2\x73\xf0\x8d\x16\x5f\x01\x40\x3e\x27\x32\xe0\xd1\x7a\x6a\xb5\xf8\xdf\xaf\xe3\x50\x01\x14\xb2\x30\x2d\xb4\xab\xe8\xe2\xa9\x97\x5b\x42\x2f\x13\x0b\x75\x06\x59\x26\x7a\x2f\xba\x7c\x01\x5e\xe2\x94\x0c\xea\x7a\xf9\xbf\x79\x18\xe8\xba\x05\x28\xb7\x39\x96\xdd\x0a\x75\x17\xbc\xd0\x2c\xfc\x09\xd6\xea\x69\xfd\x5e\x1b\x8e\x1f\xd0\xbc\x69\xdd\xb0\x9f\x29\xdb\xb5\xc0\x21\x9e\xad\x27\xf9\x92\x48\xb9\xde\xdd\xac\xe4\x3b\x2e\xf7\xd7\x87\xe1\x21\x0e\xec\xf8\x87\x67\xb2\x24\xd2\xba\x7b\xbb\x95\xb7\x00\x00\x00\xff\xff\x68\x73\xfe\x0a\xed\x02\x00\x00")

func networkingYamlBytes() ([]byte, error) {
	return bindataRead(
		_networkingYaml,
		"networking.yaml",
	)
}

func networkingYaml() (*asset, error) {
	bytes, err := networkingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "networking.yaml", size: 749, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _securityYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xc1\x6a\xeb\x30\x10\x45\xf7\xfa\x8a\x21\xdb\xc7\x8b\xf0\xee\x3d\xed\x4a\x7e\xa0\x34\xd0\xfd\x74\x3c\x75\x86\xd8\x92\xaa\x19\xab\xf5\xdf\x17\x3b\x0e\x49\x1a\x28\xed\x4e\x0c\xf7\xde\x73\x10\x66\x79\xe6\xa2\x92\x62\x80\x81\x0d\xb7\x98\xb3\x52\x6a\x79\x4b\x69\xf0\xb5\xc1\x3e\x1f\xb0\x71\x47\x89\x6d\x80\x27\xd6\x34\x16\xe2\x5d\x8f\xaa\x6e\x8e\xb7\x68\x18\x1c\x40\xc4\x81\x03\xec\x99\xc6\x22\x36\x39\xcd\x4c\xf3\xf9\x9d\xa5\x3b\x58\x80\xff\x0e\x40\x28\x45\x9d\x8f\x7f\x41\x0b\x05\x38\x98\x65\x0d\xde\x53\x1b\x6f\xa1\xc7\x7f\xea\x97\xb0\x2f\x2b\x8f\x66\x1e\xab\xd7\x75\x7f\xab\xb5\x73\x00\x00\x36\x65\x0e\x20\x03\x76\xec\xb5\x76\x7f\x3e\x86\xde\x01\x70\xb4\x22\xbc\xb2\x4e\x66\x8f\xa9\x17\x9a\x96\x4e\xe1\xb7\x51\x0a\xb7\x01\xac\x8c\x7c\x99\x59\x5e\x00\x5d\x49\x63\x0e\x90\x2f\x85\xb9\x72\xf2\x98\xcf\xed\x59\x62\x49\x08\xeb\x9a\xa9\xe7\x5f\xac\xcd\x0b\x1b\x36\x57\xf0\x1d\x17\x93\x57\x21\xb4\x35\xfd\x33\x85\x9a\x26\xec\xb8\xdc\x7c\xce\x9d\x10\x7d\xdd\xfe\xd6\x64\xcf\xa5\x0a\x31\x3c\x10\xa5\x31\xda\x6f\x6c\x36\x9b\x3b\xb6\x9e\xd6\xf0\x7a\xec\x06\xef\x3e\x03\x00\x00\xff\xff\x94\x6c\x10\xb8\x5e\x02\x00\x00")

func securityYamlBytes() ([]byte, error) {
	return bindataRead(
		_securityYaml,
		"security.yaml",
	)
}

func securityYaml() (*asset, error) {
	bytes, err := securityYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "security.yaml", size: 606, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _storageYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\xcd\x4a\x03\x31\x14\x85\xf7\x79\x8a\x43\xb7\xe2\x84\xae\x2c\xd9\xf6\x05\x44\xa1\xfb\x4b\xe6\x92\x86\xe6\xcf\xdc\x4c\xd4\xb7\x97\x99\x4e\xad\x45\x14\x04\x77\x33\x37\x97\xef\x7c\x39\xa1\xe2\x0f\x5c\xc5\xe7\x64\x10\xb9\xd1\x40\xa5\x88\xcd\x23\x0f\x36\x47\xdd\xb7\x14\xca\x91\xb6\xea\xe4\xd3\x68\xf0\xc4\x92\xa7\x6a\x79\x1f\x48\x44\xcd\xeb\x23\x35\x32\x0a\x48\x14\xd9\xe0\xb9\xe5\x4a\x8e\x95\x14\xb6\xf3\xf4\x95\xbd\x3b\x36\x83\x07\x05\x78\x9b\x93\xcc\xc3\x7b\x48\xb5\x06\xc7\xd6\x8a\x18\xad\xed\x98\x6e\x33\x4f\x3b\xd1\xcb\xb2\xae\x6b\x9c\x9d\xe3\x58\xb4\x9c\xf1\x83\x74\xa7\x00\xa0\xbd\x17\x36\xf0\x91\x1c\x6b\xe9\xee\xee\x2d\x06\x05\x70\x6a\xd5\xf3\x1a\x75\xf6\x7a\x9c\x6f\x28\x8d\x53\xc3\x21\x87\x29\x32\xf6\x81\x7c\x94\x85\x52\xf9\x65\xf2\x95\x47\x83\x56\x27\xbe\x82\x97\x2f\xc0\xd5\x3c\x15\x83\xcd\x66\xfd\xbf\x48\x19\x94\x4f\x6a\x5f\xa0\xf6\xca\x04\xfa\xa5\xd4\xbe\xfd\x59\x24\x44\xfe\x67\x87\xdf\xe3\xd7\xf7\xc1\xfe\x5c\xe8\x1f\xa2\x2f\xd5\x9f\x76\x32\xf8\xfc\x4d\x63\x3d\xb6\x5f\xb8\xb7\x0e\x1f\x01\x00\x00\xff\xff\x24\x41\x89\x48\x67\x02\x00\x00")

func storageYamlBytes() ([]byte, error) {
	return bindataRead(
		_storageYaml,
		"storage.yaml",
	)
}

func storageYaml() (*asset, error) {
	bytes, err := storageYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "storage.yaml", size: 615, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workloadsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd2\xb1\xce\xda\x30\x10\xc0\xf1\x3d\x4f\x71\x62\xad\x4a\x44\xa7\xca\x2b\x4c\x9d\x2a\x90\xda\xf9\xb0\x8f\xc4\xc5\xf1\xb9\xbe\x4b\x28\x6f\x5f\x25\x24\x2a\x50\x10\x1f\x82\x2d\xb2\x9c\xff\xef\x2e\x0a\x26\xff\x83\xb2\x78\x8e\x06\x1a\x52\x9c\x63\x4a\x62\xd9\xd1\xdc\x72\x53\x76\x0b\x0c\xa9\xc6\x45\xb1\xf7\xd1\x19\x58\x93\x70\x9b\x2d\x2d\x03\x8a\x14\xfd\x75\x87\x8a\xa6\x00\x88\xd8\x90\x81\x9f\x9c\xf7\x81\xd1\x49\x21\x89\x6c\x7f\x7e\x20\x5f\xd5\x6a\xe0\x4b\x01\xe0\x2d\x47\xe9\x0f\x3f\x83\x64\x6b\xa0\x56\x4d\x62\xca\xd2\xba\x78\xa9\xee\xbf\x4a\x39\x5c\x2e\xf3\x08\xda\x1e\x24\x29\x0f\x13\x30\x97\xae\x2a\x00\x00\xf4\x98\xc8\x80\x6f\xb0\xa2\x52\xba\xea\xd3\x9f\x26\x14\x00\x14\x35\x7b\x1a\xb1\xd3\x6c\x2b\x4a\x81\x8f\x0d\x45\x95\xe1\xc5\x4c\xbf\x5b\x9f\xc9\x19\xd0\xdc\xd2\xbf\xd6\xf0\x04\x50\x65\x6e\x93\x81\x7e\xae\xf1\x64\x9a\xc5\x80\xbb\x4a\x01\x74\xd3\x27\xec\x16\x67\xe4\x9a\x52\xf0\x16\x61\x43\xaf\x9b\xf9\xd4\x12\xfa\x98\xa9\x9e\x23\x2c\x39\x6a\xe6\x10\x28\x3f\xc3\xcf\x66\xf7\xf0\x3e\x6a\xaf\x9a\xf7\xe6\xd8\x28\x2a\xed\xda\xf0\x96\xe5\x65\x8c\x3d\xdc\x7e\x85\xd4\x70\x7c\x8b\xe9\x86\xd4\x43\xf1\x1b\x6f\x9f\xa1\xb6\xa8\xb6\xfe\xcf\xfa\x35\x45\xee\x29\xcb\xcc\xf1\x16\xb5\xc3\x20\x4f\x5a\x36\x73\xbc\xed\x6d\x49\xf1\x1c\xfd\xce\xee\xc5\xff\x26\x4d\x85\xcb\xbd\xfe\x06\x00\x00\xff\xff\x65\xa9\x37\xc5\x74\x04\x00\x00")

func workloadsYamlBytes() ([]byte, error) {
	return bindataRead(
		_workloadsYaml,
		"workloads.yaml",
	)
}

func workloadsYaml() (*asset, error) {
	bytes, err := workloadsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "workloads.yaml", size: 1140, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"admin.yaml":      adminYaml,
	"config.yaml":     configYaml,
	"datastore.yaml":  datastoreYaml,
	"helm2.yaml":      helm2Yaml,
	"helm3.yaml":      helm3Yaml,
	"kubernetes.yaml": kubernetesYaml,
	"monitoring.yaml": monitoringYaml,
	"networking.yaml": networkingYaml,
	"security.yaml":   securityYaml,
	"storage.yaml":    storageYaml,
	"workloads.yaml":  workloadsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"admin.yaml":      {adminYaml, map[string]*bintree{}},
	"config.yaml":     {configYaml, map[string]*bintree{}},
	"datastore.yaml":  {datastoreYaml, map[string]*bintree{}},
	"helm2.yaml":      {helm2Yaml, map[string]*bintree{}},
	"helm3.yaml":      {helm3Yaml, map[string]*bintree{}},
	"kubernetes.yaml": {kubernetesYaml, map[string]*bintree{}},
	"monitoring.yaml": {monitoringYaml, map[string]*bintree{}},
	"networking.yaml": {networkingYaml, map[string]*bintree{}},
	"security.yaml":   {securityYaml, map[string]*bintree{}},
	"storage.yaml":    {storageYaml, map[string]*bintree{}},
	"workloads.yaml":  {workloadsYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
