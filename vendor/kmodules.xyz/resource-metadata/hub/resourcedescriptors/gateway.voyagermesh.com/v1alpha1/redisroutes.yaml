apiVersion: meta.k8s.appscode.com/v1alpha1
kind: ResourceDescriptor
metadata:
  creationTimestamp: null
  labels:
    k8s.io/group: gateway.voyagermesh.com
    k8s.io/kind: RedisRoute
    k8s.io/resource: redisroutes
    k8s.io/version: v1alpha1
  name: gateway.voyagermesh.com-v1alpha1-redisroutes
spec:
  resource:
    group: gateway.voyagermesh.com
    kind: RedisRoute
    name: redisroutes
    scope: Namespaced
    version: v1alpha1
  validation:
    openAPIV3Schema:
      description: |-
        RedisRoute provides a way to route TCP requests. When combined with a Gateway
        listener, it can be used to forward connections on the port specified by the
        listener to a set of backends specified by the RedisRoute.
      properties:
        apiVersion:
          description: |-
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and
            may reject unrecognized values.
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
          type: string
        kind:
          description: |-
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to.
            Cannot be updated.
            In CamelCase.
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          type: string
        metadata:
          properties:
            name:
              description: 'Name must be unique within a namespace. Is required when
                creating resources, although some resources may allow a client to
                request the generation of an appropriate name automatically. Name
                is primarily intended for creation idempotence and configuration definition.
                Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
              type: string
            namespace:
              description: "Namespace defines the space within which each name must
                be unique. An empty namespace is equivalent to the \"default\" namespace,
                but \"default\" is the canonical representation. Not all objects are
                required to be scoped to a namespace - the value of this field for
                those objects will be empty. \n Must be a DNS_LABEL. Cannot be updated.
                More info: http://kubernetes.io/docs/user-guide/namespaces"
              type: string
            labels:
              additionalProperties:
                type: string
              description: 'Map of string keys and values that can be used to organize
                and categorize (scope and select) objects. May match selectors of
                replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels'
              type: object
            annotations:
              additionalProperties:
                type: string
              description: 'Annotations is an unstructured key value map stored with
                a resource that may be set by external tools to store and retrieve
                arbitrary metadata. They are not queryable and should be preserved
                when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
              type: object
          type: object
        spec:
          description: Spec defines the desired state of RedisRoute.
          properties:
            authSecret:
              description: AuthSecret is used for downstream and upstream authentication
              properties:
                name:
                  description: name is unique within a namespace to reference a secret
                    resource.
                  type: string
                namespace:
                  description: namespace defines the space within which the secret
                    name must be unique.
                  type: string
              type: object
              x-kubernetes-map-type: atomic
            hostnames:
              description: |-
                Hostnames defines a set of SNI names that should match against the
                SNI attribute of TLS ClientHello message in TLS handshake. This matches
                the RFC 1123 definition of a hostname with 2 notable exceptions:

                1. IPs are not allowed in SNI names per RFC 6066.
                2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
                   label must appear by itself as the first label.

                If a hostname is specified by both the Listener and RedisRoute, there
                must be at least one intersecting hostname for the RedisRoute to be
                attached to the Listener. For example:

                * A Listener with `test.example.com` as the hostname matches RedisRoutes
                  that have either not specified any hostnames, or have specified at
                  least one of `test.example.com` or `*.example.com`.
                * A Listener with `*.example.com` as the hostname matches RedisRoutes
                  that have either not specified any hostnames or have specified at least
                  one hostname that matches the Listener hostname. For example,
                  `test.example.com` and `*.example.com` would both match. On the other
                  hand, `example.com` and `test.example.net` would not match.

                If both the Listener and RedisRoute have specified hostnames, any
                RedisRoute hostnames that do not match the Listener hostname MUST be
                ignored. For example, if a Listener specified `*.example.com`, and the
                RedisRoute specified `test.example.com` and `test.example.net`,
                `test.example.net` must not be considered for a match.

                If both the Listener and RedisRoute have specified hostnames, and none
                match with the criteria above, then the RedisRoute is not accepted. The
                implementation must raise an 'Accepted' Condition with a status of
                `False` in the corresponding RouteParentStatus.

                Support: Core
              items:
                description: |-
                  Hostname is the fully qualified domain name of a network host. This matches
                  the RFC 1123 definition of a hostname with 2 notable exceptions:

                   1. IPs are not allowed.
                   2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
                      label must appear by itself as the first label.

                  Hostname can be "precise" which is a domain name without the terminating
                  dot of a network host (e.g. "foo.example.com") or "wildcard", which is a
                  domain name prefixed with a single wildcard label (e.g. `*.example.com`).

                  Note that as per RFC1035 and RFC1123, a *label* must consist of lower case
                  alphanumeric characters or '-', and must start and end with an alphanumeric
                  character. No other punctuation is allowed.
                maxLength: 253
                minLength: 1
                pattern: ^(\*\.)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                type: string
              maxItems: 16
              type: array
            parentRefs:
              description: |-
                ParentRefs references the resources (usually Gateways) that a Route wants
                to be attached to. Note that the referenced parent resource needs to
                allow this for the attachment to be complete. For Gateways, that means
                the Gateway needs to allow attachment from Routes of this kind and
                namespace. For Services, that means the Service must either be in the same
                namespace for a "producer" route, or the mesh implementation must support
                and allow "consumer" routes for the referenced Service. ReferenceGrant is
                not applicable for governing ParentRefs to Services - it is not possible to
                create a "producer" route for a Service in a different namespace from the
                Route.

                There are two kinds of parent resources with "Core" support:

                * Gateway (Gateway conformance profile)
                * Service (Mesh conformance profile, ClusterIP Services only)

                This API may be extended in the future to support additional kinds of parent
                resources.

                ParentRefs must be _distinct_. This means either that:

                * They select different objects.  If this is the case, then parentRef
                  entries are distinct. In terms of fields, this means that the
                  multi-part key defined by `group`, `kind`, `namespace`, and `name` must
                  be unique across all parentRef entries in the Route.
                * They do not select different objects, but for each optional field used,
                  each ParentRef that selects the same object must set the same set of
                  optional fields to different values. If one ParentRef sets a
                  combination of optional fields, all must set the same combination.

                Some examples:

                * If one ParentRef sets `sectionName`, all ParentRefs referencing the
                  same object must also set `sectionName`.
                * If one ParentRef sets `port`, all ParentRefs referencing the same
                  object must also set `port`.
                * If one ParentRef sets `sectionName` and `port`, all ParentRefs
                  referencing the same object must also set `sectionName` and `port`.

                It is possible to separately reference multiple distinct objects that may
                be collapsed by an implementation. For example, some implementations may
                choose to merge compatible Gateway Listeners together. If that is the
                case, the list of routes attached to those resources should also be
                merged.

                Note that for ParentRefs that cross namespace boundaries, there are specific
                rules. Cross-namespace references are only valid if they are explicitly
                allowed by something in the namespace they are referring to. For example,
                Gateway has the AllowedRoutes field, and ReferenceGrant provides a
                generic way to enable other kinds of cross-namespace reference.

                <gateway:experimental:description>
                ParentRefs from a Route to a Service in the same namespace are "producer"
                routes, which apply default routing rules to inbound connections from
                any namespace to the Service.

                ParentRefs from a Route to a Service in a different namespace are
                "consumer" routes, and these routing rules are only applied to outbound
                connections originating from the same namespace as the Route, for which
                the intended destination of the connections are a Service targeted as a
                ParentRef of the Route.
                </gateway:experimental:description>

                <gateway:standard:validation:XValidation:message="sectionName must be specified when parentRefs includes 2 or more references to the same parent",rule="self.all(p1, self.all(p2, p1.group == p2.group && p1.kind == p2.kind && p1.name == p2.name && (((!has(p1.__namespace__) || p1.__namespace__ == '') && (!has(p2.__namespace__) || p2.__namespace__ == '')) || (has(p1.__namespace__) && has(p2.__namespace__) && p1.__namespace__ == p2.__namespace__ )) ? ((!has(p1.sectionName) || p1.sectionName == '') == (!has(p2.sectionName) || p2.sectionName == '')) : true))">
                <gateway:standard:validation:XValidation:message="sectionName must be unique when parentRefs includes 2 or more references to the same parent",rule="self.all(p1, self.exists_one(p2, p1.group == p2.group && p1.kind == p2.kind && p1.name == p2.name && (((!has(p1.__namespace__) || p1.__namespace__ == '') && (!has(p2.__namespace__) || p2.__namespace__ == '')) || (has(p1.__namespace__) && has(p2.__namespace__) && p1.__namespace__ == p2.__namespace__ )) && (((!has(p1.sectionName) || p1.sectionName == '') && (!has(p2.sectionName) || p2.sectionName == '')) || (has(p1.sectionName) && has(p2.sectionName) && p1.sectionName == p2.sectionName))))">
                <gateway:experimental:validation:XValidation:message="sectionName or port must be specified when parentRefs includes 2 or more references to the same parent",rule="self.all(p1, self.all(p2, p1.group == p2.group && p1.kind == p2.kind && p1.name == p2.name && (((!has(p1.__namespace__) || p1.__namespace__ == '') && (!has(p2.__namespace__) || p2.__namespace__ == '')) || (has(p1.__namespace__) && has(p2.__namespace__) && p1.__namespace__ == p2.__namespace__)) ? ((!has(p1.sectionName) || p1.sectionName == '') == (!has(p2.sectionName) || p2.sectionName == '') && (!has(p1.port) || p1.port == 0) == (!has(p2.port) || p2.port == 0)): true))">
                <gateway:experimental:validation:XValidation:message="sectionName or port must be unique when parentRefs includes 2 or more references to the same parent",rule="self.all(p1, self.exists_one(p2, p1.group == p2.group && p1.kind == p2.kind && p1.name == p2.name && (((!has(p1.__namespace__) || p1.__namespace__ == '') && (!has(p2.__namespace__) || p2.__namespace__ == '')) || (has(p1.__namespace__) && has(p2.__namespace__) && p1.__namespace__ == p2.__namespace__ )) && (((!has(p1.sectionName) || p1.sectionName == '') && (!has(p2.sectionName) || p2.sectionName == '')) || ( has(p1.sectionName) && has(p2.sectionName) && p1.sectionName == p2.sectionName)) && (((!has(p1.port) || p1.port == 0) && (!has(p2.port) || p2.port == 0)) || (has(p1.port) && has(p2.port) && p1.port == p2.port))))">
              items:
                description: |-
                  ParentReference identifies an API object (usually a Gateway) that can be considered
                  a parent of this resource (usually a route). There are two kinds of parent resources
                  with "Core" support:

                  * Gateway (Gateway conformance profile)
                  * Service (Mesh conformance profile, ClusterIP Services only)

                  This API may be extended in the future to support additional kinds of parent
                  resources.

                  The API object must be valid in the cluster; the Group and Kind must
                  be registered in the cluster for this reference to be valid.
                properties:
                  group:
                    default: gateway.networking.k8s.io
                    description: |-
                      Group is the group of the referent.
                      When unspecified, "gateway.networking.k8s.io" is inferred.
                      To set the core API group (such as for a "Service" kind referent),
                      Group must be explicitly set to "" (empty string).

                      Support: Core
                    maxLength: 253
                    pattern: ^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                    type: string
                  kind:
                    default: Gateway
                    description: |-
                      Kind is kind of the referent.

                      There are two kinds of parent resources with "Core" support:

                      * Gateway (Gateway conformance profile)
                      * Service (Mesh conformance profile, ClusterIP Services only)

                      Support for other resources is Implementation-Specific.
                    maxLength: 63
                    minLength: 1
                    pattern: ^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$
                    type: string
                  name:
                    description: |-
                      Name is the name of the referent.

                      Support: Core
                    maxLength: 253
                    minLength: 1
                    type: string
                  namespace:
                    description: |-
                      Namespace is the namespace of the referent. When unspecified, this refers
                      to the local namespace of the Route.

                      Note that there are specific rules for ParentRefs which cross namespace
                      boundaries. Cross-namespace references are only valid if they are explicitly
                      allowed by something in the namespace they are referring to. For example:
                      Gateway has the AllowedRoutes field, and ReferenceGrant provides a
                      generic way to enable any other kind of cross-namespace reference.

                      <gateway:experimental:description>
                      ParentRefs from a Route to a Service in the same namespace are "producer"
                      routes, which apply default routing rules to inbound connections from
                      any namespace to the Service.

                      ParentRefs from a Route to a Service in a different namespace are
                      "consumer" routes, and these routing rules are only applied to outbound
                      connections originating from the same namespace as the Route, for which
                      the intended destination of the connections are a Service targeted as a
                      ParentRef of the Route.
                      </gateway:experimental:description>

                      Support: Core
                    maxLength: 63
                    minLength: 1
                    pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
                    type: string
                  port:
                    description: |-
                      Port is the network port this Route targets. It can be interpreted
                      differently based on the type of parent resource.

                      When the parent resource is a Gateway, this targets all listeners
                      listening on the specified port that also support this kind of Route(and
                      select this Route). It's not recommended to set `Port` unless the
                      networking behaviors specified in a Route must apply to a specific port
                      as opposed to a listener(s) whose port(s) may be changed. When both Port
                      and SectionName are specified, the name and port of the selected listener
                      must match both specified values.

                      <gateway:experimental:description>
                      When the parent resource is a Service, this targets a specific port in the
                      Service spec. When both Port (experimental) and SectionName are specified,
                      the name and port of the selected port must match both specified values.
                      </gateway:experimental:description>

                      Implementations MAY choose to support other parent resources.
                      Implementations supporting other types of parent resources MUST clearly
                      document how/if Port is interpreted.

                      For the purpose of status, an attachment is considered successful as
                      long as the parent resource accepts it partially. For example, Gateway
                      listeners can restrict which Routes can attach to them by Route kind,
                      namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
                      from the referencing Route, the Route MUST be considered successfully
                      attached. If no Gateway listeners accept attachment from this Route,
                      the Route MUST be considered detached from the Gateway.

                      Support: Extended
                    format: int32
                    maximum: 65535
                    minimum: 1
                    type: integer
                  sectionName:
                    description: |-
                      SectionName is the name of a section within the target resource. In the
                      following resources, SectionName is interpreted as the following:

                      * Gateway: Listener name. When both Port (experimental) and SectionName
                      are specified, the name and port of the selected listener must match
                      both specified values.
                      * Service: Port name. When both Port (experimental) and SectionName
                      are specified, the name and port of the selected listener must match
                      both specified values.

                      Implementations MAY choose to support attaching Routes to other resources.
                      If that is the case, they MUST clearly document how SectionName is
                      interpreted.

                      When unspecified (empty string), this will reference the entire resource.
                      For the purpose of status, an attachment is considered successful if at
                      least one section in the parent resource accepts it. For example, Gateway
                      listeners can restrict which Routes can attach to them by Route kind,
                      namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
                      the referencing Route, the Route MUST be considered successfully
                      attached. If no Gateway listeners accept attachment from this Route, the
                      Route MUST be considered detached from the Gateway.

                      Support: Core
                    maxLength: 253
                    minLength: 1
                    pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                    type: string
                required:
                - name
                type: object
              maxItems: 32
              type: array
            rules:
              description: Rules are a list of TCP matchers and actions.
              items:
                description: RedisRouteRule is the configuration for a given rule.
                properties:
                  backendRefs:
                    description: |-
                      BackendRefs defines the backend(s) where matching requests should be
                      sent. If unspecified or invalid (refers to a non-existent resource or a
                      Service with no endpoints), the underlying implementation MUST actively
                      reject connection attempts to this backend. Connection rejections must
                      respect weight; if an invalid backend is requested to have 80% of
                      connections, then 80% of connections must be rejected instead.

                      Support: Core for Kubernetes Service

                      Support: Extended for Kubernetes ServiceImport

                      Support: Implementation-specific for any other resource

                      Support for weight: Extended
                    items:
                      description: |-
                        BackendRef defines how a Route should forward a request to a Kubernetes
                        resource.

                        Note that when a namespace different than the local namespace is specified, a
                        ReferenceGrant object is required in the referent namespace to allow that
                        namespace's owner to accept the reference. See the ReferenceGrant
                        documentation for details.

                        <gateway:experimental:description>

                        When the BackendRef points to a Kubernetes Service, implementations SHOULD
                        honor the appProtocol field if it is set for the target Service Port.

                        Implementations supporting appProtocol SHOULD recognize the Kubernetes
                        Standard Application Protocols defined in KEP-3726.

                        If a Service appProtocol isn't specified, an implementation MAY infer the
                        backend protocol through its own means. Implementations MAY infer the
                        protocol from the Route type referring to the backend Service.

                        If a Route is not able to send traffic to the backend using the specified
                        protocol then the backend is considered invalid. Implementations MUST set the
                        "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.

                        </gateway:experimental:description>

                        Note that when the BackendTLSPolicy object is enabled by the implementation,
                        there are some extra rules about validity to consider here. See the fields
                        where this struct is used for more information about the exact behavior.
                      properties:
                        group:
                          default: ""
                          description: |-
                            Group is the group of the referent. For example, "gateway.networking.k8s.io".
                            When unspecified or empty string, core API group is inferred.
                          maxLength: 253
                          pattern: ^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                          type: string
                        kind:
                          default: Service
                          description: |-
                            Kind is the Kubernetes resource kind of the referent. For example
                            "Service".

                            Defaults to "Service" when not specified.

                            ExternalName services can refer to CNAME DNS records that may live
                            outside of the cluster and as such are difficult to reason about in
                            terms of conformance. They also may not be safe to forward to (see
                            CVE-2021-25740 for more information). Implementations SHOULD NOT
                            support ExternalName Services.

                            Support: Core (Services with a type other than ExternalName)

                            Support: Implementation-specific (Services with type ExternalName)
                          maxLength: 63
                          minLength: 1
                          pattern: ^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$
                          type: string
                        name:
                          description: Name is the name of the referent.
                          maxLength: 253
                          minLength: 1
                          type: string
                        namespace:
                          description: |-
                            Namespace is the namespace of the backend. When unspecified, the local
                            namespace is inferred.

                            Note that when a namespace different than the local namespace is specified,
                            a ReferenceGrant object is required in the referent namespace to allow that
                            namespace's owner to accept the reference. See the ReferenceGrant
                            documentation for details.

                            Support: Core
                          maxLength: 63
                          minLength: 1
                          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
                          type: string
                        port:
                          description: |-
                            Port specifies the destination port number to use for this resource.
                            Port is required when the referent is a Kubernetes Service. In this
                            case, the port number is the service port number, not the target port.
                            For other resources, destination port might be derived from the referent
                            resource or this field.
                          format: int32
                          maximum: 65535
                          minimum: 1
                          type: integer
                        weight:
                          default: 1
                          description: |-
                            Weight specifies the proportion of requests forwarded to the referenced
                            backend. This is computed as weight/(sum of all weights in this
                            BackendRefs list). For non-zero values, there may be some epsilon from
                            the exact proportion defined here depending on the precision an
                            implementation supports. Weight is not a percentage and the sum of
                            weights does not need to equal 100.

                            If only one backend is specified and it has a weight greater than 0, 100%
                            of the traffic is forwarded to that backend. If weight is set to 0, no
                            traffic should be forwarded for this entry. If unspecified, weight
                            defaults to 1.

                            Support for this field varies based on the context where used.
                          format: int32
                          maximum: 1000000
                          minimum: 0
                          type: integer
                      required:
                      - name
                      type: object
                      x-kubernetes-validations:
                      - message: Must have port for Service reference
                        rule: '(size(self.group) == 0 && self.kind == ''Service'')
                          ? has(self.port) : true'
                    maxItems: 16
                    minItems: 1
                    type: array
                  filters:
                    description: |-
                      Filters define the filters that are applied to requests that match
                      this rule.

                      The effects of ordering of multiple behaviors are currently unspecified.
                      This can change in the future based on feedback during the alpha stage.

                      Conformance-levels at this level are defined based on the type of filter:

                      - ALL core filters MUST be supported by all implementations.
                      - Implementers are encouraged to support extended filters.
                      - Implementation-specific custom filters have no API guarantees across
                        implementations.

                      Specifying a core filter multiple times has unspecified or
                      implementation-specific conformance.

                      All filters are expected to be compatible with each other except for the
                      URLRewrite and RequestRedirect filters, which may not be combined. If an
                      implementation can not support other combinations of filters, they must clearly
                      document that limitation. In all cases where incompatible or unsupported
                      filters are specified, implementations MUST add a warning condition to status.

                      Support: Core
                    items:
                      type: object
                    maxItems: 16
                    type: array
                type: object
              maxItems: 16
              minItems: 1
              type: array
          required:
          - rules
          type: object
      required:
      - spec
      type: object
