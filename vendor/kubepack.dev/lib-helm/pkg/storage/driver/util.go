/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package driver

import (
	"fmt"
	"regexp"
	"strconv"
	"strings"

	"helm.sh/helm/v3/pkg/storage"
)

var r = regexp.MustCompile(`^(.*).v(\d+)$`)

// ParseKey returns release name and version from a key generated by makeKey.
// ref: https://github.com/helm/helm/blob/241785c70fb38b2c074d7b3ddf0925812fb3fc69/pkg/storage/storage.go#L242-L250
func ParseKey(key string) (string, int, error) {
	prefix := storage.HelmStorageType + "."
	if !strings.HasPrefix(key, prefix) {
		return "", 0, fmt.Errorf("key missing storage prefix %s", prefix)
	}
	key = strings.TrimPrefix(key, prefix)

	matches := r.FindAllStringSubmatch(key, -1)
	if len(matches) == 0 {
		return "", 0, fmt.Errorf("failed to match regex")
	}

	rlsName := matches[0][1]
	version, err := strconv.Atoi(matches[0][2])
	if err != nil {
		return "", 0, err
	}
	return rlsName, version, nil
}

func relevantReleases(lbls map[string]string) []string {
	var result []string
	for k, v := range lbls {
		if strings.HasPrefix(k, annotaionScopeReleaseName+"/") {
			result = append(result, v)
		}
	}
	return result
}
